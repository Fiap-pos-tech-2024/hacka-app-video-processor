import { defaultConfig } from './infrastructure/config/AppConfig.js';
import { DependencyFactory } from './infrastructure/factories/DependencyFactory.js';
import { VideoProcessingService } from './application/services/VideoProcessingService.js';

async function main(): Promise<void> {
  try {
    console.log('[STARTUP] Iniciando aplicaÃ§Ã£o de processamento de vÃ­deos...');
    
    // Criar factory de dependÃªncias
    const dependencyFactory = new DependencyFactory(defaultConfig);
    
    // Criar casos de uso
    const processVideoUseCase = dependencyFactory.createProcessVideoUseCase();
    const createQueueUseCase = dependencyFactory.createCreateQueueUseCase();
    
    // Determinar a URL da fila - usar diretamente se fornecida via env, senÃ£o criar
    const queueUrl = defaultConfig.queue.url || '';
    const queueName = defaultConfig.queue.name;
    
    console.log('-  ConfiguraÃ§Ãµes:');
    console.log(`   - RegiÃ£o AWS: ${defaultConfig.aws.region}`);
    console.log(`   - Bucket S3: ${defaultConfig.s3.bucket}`);
    console.log(`   - Fila SQS: ${queueUrl || queueName}`);
    console.log(`   - Ambiente: ${process.env.NODE_ENV || 'development'}`);
    
    // Criar e iniciar serviÃ§o principal
    const videoProcessingService = new VideoProcessingService(
      processVideoUseCase,
      createQueueUseCase,
      queueUrl || queueName, // Usar URL direta se disponÃ­vel, senÃ£o o nome
      defaultConfig.queue.checkIntervalMs
    );
    
    await videoProcessingService.start();
    
    // Manter aplicaÃ§Ã£o rodando
    process.on('SIGINT', () => {
      console.log('\nðŸ›‘ Encerrando aplicaÃ§Ã£o...');
      process.exit(0);
    });
    
  } catch (error) {
    console.error('[ERROR] Erro crÃ­tico na aplicaÃ§Ã£o:', error);
    process.exit(1);
  }
}

main();




